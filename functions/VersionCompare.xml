<fmxmlsnippet type="FMObjectList">
	<CustomFunction id="282" functionArity="3" visible="True" parameters="versionString1;versionString2;options" name="VersionCompare">
		<Calculation><![CDATA[// VersionCompare ( versionString1 ; versionString2 ; options ) 
// version 1.2.1, Daniel A. Shockley, Erik Shagdar, NYHTC

/* 
	Compares two multi-part version strings properly, returning 0 if the same, +1 if first is greater, -1 is second is greater, and "?" if some error. Can also optionally specify the version component separator - the default is a dot (".")


NOTE: 
	options as a simple string allows for a non-default "Delim" literal.
	options can be a dictionary where the key "Delim" overrides the default component delimiter.
	options can be a dictionary where the key "Op" overrides the type of result. 
		"Op" can be one of these operators, where it returns True or False when applying that operator to versionString1 OP versionString2:
		• Max, >, ≥, >=, <, ≤, <=, =
			(note that "Max" will return the bigger of the two versions, not a Boolean result)


EXAMPLES: 
	INPUT: VersionCompare ( "3" ; "5" ; "" ) 
	OUTPUT: -1

	INPUT: VersionCompare ( 5 ; 3 ; "" ) 
	OUTPUT: 1

	INPUT: VersionCompare ( "5.2" ; "5.2" ; "" ) 
	OUTPUT: 0

	INPUT: VersionCompare ( 3 ; 5 ; # ( "Op" ; "Max" ) ) 
	OUTPUT: 5

	INPUT: VersionCompare ( "3.2" ; "3.4" ; # ( "Op" ; "<" ) ) 
	OUTPUT: True

	INPUT: VersionCompare ( "3|2" ; "3|4" ; # ( "Op" ; "<" ) & # ( "Delim" ; "|" ) ) 
	OUTPUT: True


REQUIRES:
	DictFirst
	DictGet
	TextAfter
	VersionCompare


HISTORY:
	1.2.1 - 2018-01-17 ( eshagdar ): added requires documentation. cleaned up white-space - multiple spaces are tabs, remove extra spaces on blank lines.
	1.2 - 2018-01-17 ( dshockley, eshagdar ): Make recursive. 3rd param is now optionally a dictionary. Add Op as a key in options dictionary. Fix to work when doing comparisons where the versions are simple decimal intention. For example, when 5.0303 is supposed to be LOWER than 5.07. The hint is that if one of the numbers in a segment begins with 0, need to pad the END of the shorter of the two strings before converting to number. 
	1.1.1 - 2016-09-29 ( eshagdar ): updated documentation.
	1.1 - 2015-11-16 ( dshockley ): updated to return error if either is NOT a valid number at all.
	1.0 - 2015-02-10 ( dshockley ): first created.
*/


Let ( [ 


// TEST PARAMS: versionString1 = "10.10.1.7"; versionString2 = "10.10.2"; optionalVersionComponentSeparator = ""; 


		vcSep = Case ( 
			/* Delim specified in dictionary: */
			not IsEmpty ( DictGet ( options ; "Delim" ) )
			; DictGet ( options ; "Delim" )
			;
			
			/* options is NOT dictionary, so just use directly as version component delimiter: */
			IsEmpty ( DictFirst ( options ) ) and not IsEmpty ( options )
			; options
			
			/* options is EMPTY, so use default version component delimiter: */
			; "."
		)
			
		; operator = DictGet ( options ; "Op" )

		; parsedPart1 = Substitute ( versionString1 ; vcSep; "¶" )
		; firstPart1 = GetValue ( parsedPart1 ; 1 )
		; remainingPart1 = TextAfter ( versionString1 ; vcSep )
		
		; parsedPart2 = Substitute ( versionString2 ; vcSep; "¶" )
		; firstPart2 = GetValue ( parsedPart2 ; 1 )
		; remainingPart2 = TextAfter ( versionString2 ; vcSep )

		; needZeroPadEnd = Left ( firstPart1 ; 1 ) = "0" or Left ( firstPart2 ; 1 ) = "0"
		; partLength = Max ( Length ( firstPart1 ) ; Length ( firstPart2 ) )
		; zeroPadString = Substitute ( 10^partLength - 1 ; [ "9" ; "0" ] )    /* generate a string of zeros the the length of the longest part */

		; firstPart1 = If ( needZeroPadEnd
			; Left ( firstPart1 & zeroPadString ; partLength )
			; firstPart1
		)
		; firstPart2 = If ( needZeroPadEnd
			; Left ( firstPart2 & zeroPadString ; partLength )
			; firstPart2
		)
		; firstPartDiff = ( 0+firstPart1 ) - ( 0+firstPart2 )

		; diffResult = Case ( 
			GetAsNumber ( versionString1 ) = "?" or GetAsNumber ( versionString2 ) = "?"
			; "?"
			;

			/* FIRST is GREATER, so return positive 1 */
			firstPartDiff > 0
			; +1
			;

			/* FIRST is LESSER, so return negative 1 */
			firstPartDiff < 0
			; -1
			;

			/* EQUAL so far, so continue to the remaining parts, if any: */
			firstPartDiff = 0 and ( not IsEmpty ( remainingPart1 ) or not IsEmpty ( remainingPart2 ) )
			; VersionCompare ( remainingPart1 ; remainingPart2 ; vcSep )    /* NOTE: strip out other options, since this diffResult needs the default Operator */
			;

			/* EQUAL, and nothing left to check: */
			firstPartDiff = 0 
			; 0
			;

			/* SOMETHING ELSE? */
			"?"
		)
	]; 

	Case ( 
		/* when operator is not specified (or in recursed-level calls): */
		IsEmpty ( operator )
		; diffResult
		; 

		/* return the greater of the two version strings: */
		operator = "Max"
		; If ( diffResult ≥ 0 ; versionString1 ; versionString2 )
		; 

		diffResult > 0 and ( operator = ">" or operator = "≥" or operator = ">=" )
		; True
		; 

		diffResult < 0 and ( operator = "<" or operator = "≤" or operator = "<=" )
		; True
		; 

		diffResult = 0 and ( operator = "=" or operator = "≥" or operator = ">=" or operator = "≤" or operator = "<=" )
		; True
		; 

		/* DEFAULT */
		False
	)
)]]>
		</Calculation>
	</CustomFunction>
</fmxmlsnippet>