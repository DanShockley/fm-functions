<fmxmlsnippet type="FMObjectList">
	<CustomFunction id="30" functionArity="4" visible="True" parameters="_Name_ID;_TLFSV;_fileName;_layoutName" name="FM_Name_ID">
		<Calculation><![CDATA[// FM_Name_ID ( _Name_ID ; _TLFSV ; _fileName ; _layoutName )
// version 1.7.3, Fabrice Nordmann

/*
	Avoid hard-coding in FileMaker by using IDs instead of names. This function returns the Name when given ID, and vice versa.


HISTORY:
	1.7.3 - 2018-12-07 ( dshockley, eshagdar ): Overhauled format, variable names, some logic.
	1.7.0 - 2010-12-xx ( Fabrice Nordmann ): Taken from http://fmfunctions.com/fid/82.


ORIGINAL DOCUMENTATION: 
	Fabrice Nordmann
	http://www.1-more-thing.com
	Avoids hard-coding in FileMaker by using IDs instead of names
	Full documentation here : http://www.1-more-thing.com/FileMaker-Avoid-Hard-coding.html

	if _Name_ID is an ID, returns the name
	if _Name_ID is a name, returns the ID

	_Name_ID is the name or the ID of a Table occurrence, a layout, or a field, a script or a value list
	_TLFSV can be set to "Table", "Layout", "Field", "Script", or "ValueList". Or only the first character (T,L,F,S,V)
	_fileName is optional (empty means current file)
	_layoutName is valid only if _TLFSV contains "Field". Empty means current layout (or the field table occurrence, read the note below). The layout should be tied to the table occurrence of the field.

	Note: for fields (_TLFSV = "F"), if you use the full field name (table::fieldname) AND an empty _layoutName parameter, the function will assume you are referring not to current layout but to the table occurrence found in the _TLFSV.

	Note: since FileMaker 10 and the GetFieldName function, this function is almost useless with a F (field) parameter. It remains valid for other items.
*/


If ( _TLFSV = "T::F" 
	; FM_Name_ID ( _Name_ID ; "T" ; _fileName ; _layoutName )
		& "::"
		& FM_Name_ID ( _Name_ID ; "F" ; _fileName ; _layoutName )
	; Let ( [ 
			  CR = Char ( 13 )  // carriage return
			; tfSep = "::"  // table-field separator
			; DQ = char ( 34 )  // doublequote
 
			// _fileName is optional - leave it blank and the design functions use current database.
	
			; _layoutName = 
				If ( IsEmpty ( _layoutName ) 
					; If ( PatternCount ( _Name_ID ; tfSep ) 
						; GetValue ( Substitute ( _Name_ID ; tfSep ; CR ) ; 1 ) 
						; ""  // with empty string, the design functions use the current layout name
						) 
					; _layoutName 
					) 
			; _layoutName = 
				If ( Int ( _layoutName ) = _layoutName and Length ( _layoutName ) = 7 
					; FM_Name_ID ( _layoutName ; "T" ; _fileName ; "" ) 
					; _layoutName 
					) 
			; _t = Left ( _TLFSV ; 1 )      // allow _TLFSV to be only the first character (T,L,F,S,V)
			; _t = Case ( _t = "T" ; "Table" ; _t = "L" ; "Layout" ; _t = "F" ; "Field" ; _t = "S" ; "Script" ; _t = "V" ; "ValueList" ) 

			// remove the repetition number:
			; _Name_ID = 
				If ( _t = "Field" and PatternCount ( _Name_ID ; "[" ) 
					; Left ( _Name_ID ; Position ( _Name_ID ; "[" ; 10000 ; -1 ) - 1 ) 
					; _Name_ID 
					) 

			// for fields, do not take TO: 
			; _Name_ID = 
				If ( _t = "Field" and PatternCount ( _Name_ID ; tfSep ) 
					; GetValue ( Substitute ( _Name_ID ; tfSep ; CR ) ; 2 ) 
					; _Name_ID 
					) 

			// for TO, do not take field name: 
			; _Name_ID = 
				If ( _t = "Table" and PatternCount ( _Name_ID ; tfSep ) 
					; GetValue ( Substitute ( _Name_ID ; tfSep ; CR ) ; 1 ) 
					; _Name_ID 
					) 

			; _endOfString = "( " & DQ & _fileName & DQ & Case ( _t = "field" ; "; " & DQ & _layoutName & DQ ) & ")" 
			; _names = Evaluate ( _t & "Names" & _endOfString ) 
			; _ids = Evaluate ( _t & "IDs" & _endOfString )

		];

		If ( _Name_ID = GetAsNumber ( _Name_ID ) 
			// ID -> Name		
			; If ( not IsEmpty ( FilterValues ( _Name_ID ; _ids ) ) 
				; GetValue ( 
					_names 
					; Let ( [ _text = _ids ; _item = _Name_ID ; _adj = CR & _text & CR ] ; PatternCount ( Left ( _adj ; Position ( _adj ; CR & _item & CR ; 1 ; 1 ) + 1 ) ; CR ))
					)
				; ""  // failed to find
				) 
			// Name -> ID
			; If ( not IsEmpty ( FilterValues ( _Name_ID ; _names ) ) 
				; GetValue ( 
					_ids 
					; Let ( [ _text = _names ; _item = _Name_ID ; _adj = CR & _text & CR ] ; PatternCount ( Left ( _adj ; Position ( _adj ; CR & _item & CR ; 1 ; 1 ) + 1 ) ; CR ))
					)
				; ""  // failed to find
				)

			)  // End If.
		)  // End Let.
	)  // End If.
]]>
		</Calculation>
	</CustomFunction>
</fmxmlsnippet>