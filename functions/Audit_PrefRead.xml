<fmxmlsnippet type="FMObjectList">
	<CustomFunction id="54" functionArity="1" visible="True" parameters="PrefName" name="Audit_PrefRead">
		<Calculation><![CDATA[// Audit_PrefRead ( PrefName )
// version 1.5, Erik Shagdar, NYHTC

/*
	Send in a preference name.
	Returns a value of preference ( field name ).


REQUIRES:
	#
	DictGet
	DictListKeys
	FieldNameShort


HISTORY:
	1.5 - 2016-09-14 ( eshagdar ): added cr/mod fields, auto1, audit trigger/acct/ts fields. changed hard-coded names to be references instead. Deprecated RecID, use UUID instead.
	1.4 - 2016-07-06 ( eshagdar ): renamed _Audit_PrefRead to Audit_PrefRead.
	1.3 - 2016-06-16 ( eshagdar ): renamed SyncDeK_PrefRead to _Audit_PrefRead. Updated RecID/UUID prefName
	1.2 - 2015-10-14 ( eshagdar ): reformatted to use a Dict instead. Added OrgNumMatch pref.
	1.1 - 2015-07-08 ( eshagdar ): all params are not proper case
	1.0 - 2013-12-05 ( eshagdar ): first created.
*/


Let ( [
		prefName = If ( IsEmpty ( prefName ) ; "help" ; prefName );
		dictPrefs = 
				# ( "OrgNum"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zAutoOrgNum ) )
			&	# ( "OrgMatch"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zAutoOrgMATCH ) )

			&	# ( "PubFlag"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::SyncDeK_pubFlag ) )
			&	# ( "UUID"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zzAudit_UUID ) )
			&	# ( "Trigger"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zzAudit_ModTrigger ) )
			&	# ( "AuditAccount"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zzAudit_ModAccount ) )
			&	# ( "AuditTS"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zzAudit_ModTS ) )

			&	# ( "Auto1"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zAuto1 ) )
			&	# ( "AutoSpace"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zAutoSpace ) )
			&	# ( "RecordID"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zRecordID ) )
			&	# ( "CalcRecID"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zCalcRecID ) )
			&	# ( "TableName"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zTableNm ) )

			&	# ( "CrAccount"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zCrAcct ) )
			&	# ( "CrUser"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zCrNm ) )
			&	# ( "CrScript"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zCrScript ) )
			&	# ( "CrTS"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zCrTStmp ) )

			&	# ( "ModAccount"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zModAcct ) )
			&	# ( "ModUser"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zModNm ) )
			&	# ( "ModScript"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zModScript ) )
			&	# ( "ModTS"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zModTStmp ) )



/*
	2016-09-15 ( eshagdar ): This is for backwards compatibility. Check against base elements next time it is refreshed ( currently at 2016-08-03 )
*/
			&	# ( "RecID"; Get ( LayoutTableName ) & "::" & FieldNameShort ( ZZ_INTERFACE::zzAudit_UUID ) )



	];

	If ( prefName = "help" ;
		"Below is a list of available commands¶¶" & DictListKeys ( dictPrefs ) ; 
		DictGet ( dictPrefs ; prefName )
	)
)]]>
		</Calculation>
	</CustomFunction>
</fmxmlsnippet>