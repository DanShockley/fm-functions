<fmxmlsnippet type="FMObjectList">
	<CustomFunction id="410" functionArity="3" visible="True" parameters="fieldRef;operator;someValue" name="SQL_Where">
		<Calculation><![CDATA[// SQL_Where ( fieldRef ; operator ; someValue )
// version 1.2.1, Daniel A. Shockley, Erik Shagdar, NYHTC

/* 
	Gets a 'where' clause ( for use following WHERE, AND, OR ) with the quoted short field name of the field reference, the operator, and then properly escape ( or not ) the value based on the field's Type. 


REQUIRE: 
	SQL_Date 
	SQL_EscapeList 
	SQL_EscapeString 
	SQL_Field 
	SQL_Timestamp 

HISTORY: 
	1.2.1 - 2018-01-17 ( eshagdar ): the equal sign now does a case-insensitive query. In order to do a case-sensitive query, use '=='. The 'IN' operator works on lists of numbers.
	1.2 - 2018-01-11 ( eshagdar ): convert FM operators to SQL-compatible operators
	1.1 - 2017-05-16 ( eshagdar ): added support for 'IN' operator.
	1.0 - 2016-06-27 ( dshockley ): first created.
*/


Let ( [ 
		signEqual = "=" ;
		signNotEqual = "<>" ;
		signDoubleEqual = "==" ;

		operator = Trim ( operator ) ;
		caseSensitive = ( operator = signDoubleEqual ) ;
		operator = Substitute (
			operator ;
			[ "≠" ; signNotEqual ] ;
			[ "≥" ; ">=" ] ;
			[ "≤" ; "<=" ] ;
			[ signDoubleEqual ; signEqual ]
		) ;

		fieldType = FieldType ( Get ( FileName ) ; GetFieldName ( fieldRef ) ) ;
		fieldType_isText = Position ( fieldType ; "Text" ; 1 ; 1 ) ;


		codeForField = If ( not caseSensitive and fieldType_isText
			; "UPPER ( " & SQL_Field ( fieldRef ) & " )"
			; SQL_Field ( fieldRef )
		) ;


		codeForOperation = Case ( 
			Length ( someValue ) = 0 and Trim ( operator ) = signEqual
			; "IS NULL"
			; 
			Length ( someValue ) = 0 and Trim ( operator ) = signNotEqual
			; "IS NOT NULL"
			; 
			operator
		) ;


		codeForValue = Case ( 
			Length ( someValue ) = 0 and ( operator = signEqual or operator = signNotEqual )
			; ""
			; 
			operator = "LIKE"
			; SQL_EscapeString ( Trim ( someValue ) )
			; 
			operator = "IN" 
			; If ( fieldType_isText
				; "( " & SQL_EscapeList ( someValue ) & " )"
				; "( " & substitute ( someValue ; [ ¶ ; ", " ] ) & " )"
			)
			; 
			fieldType_isText 
			; If ( not caseSensitive
				; SQL_EscapeString ( Upper ( someValue ) )
				; SQL_EscapeString ( someValue )
			)
			; 
			Position ( fieldType ; "Date" ; 1 ; 1 ) 
			; SQL_Date ( someValue )
			; 
			Position ( fieldType ; "Timestamp" ; 1 ; 1 ) 
			; SQL_Timestamp ( someValue )
			; 
			someValue
		)
	]; 

	codeForField
	& " "
	& codeForOperation
	& " "
	& codeForValue
)]]>
		</Calculation>
	</CustomFunction>
</fmxmlsnippet>