<fmxmlsnippet type="FMObjectList">
	<CustomFunction id="410" functionArity="3" visible="True" parameters="fieldRef;operator;someValue" name="SQL_Where">
		<Calculation><![CDATA[// SQL_Where ( fieldRef ; operator ; someValue )
// version 1.2.4, Daniel A. Shockley, Erik Shagdar, NYHTC

/* 
	Gets a 'where' clause ( for use following WHERE, AND, OR ) with the quoted short field name of the field reference, the operator, and then properly escape ( or not ) the value based on the field's Type. 


REQUIRE: 
	SQL_Date 
	SQL_EscapeList 
	SQL_EscapeString 
	SQL_Field 
	SQL_Timestamp 

HISTORY: 
	1.2.4 - 2018-08-16 ( dshockley ): When checking the FieldType, just use the internal "this file" by using "" for the filename, instead of trying to use Get(FileName). This mitigates a couple strange behaviors when a file name begins with a number (not advised) or has multiple periods (".") in the file name (also not advised). 
	1.2.3 - 2018-02-09 ( eshagdar ): equal sign '=' now is case-sensitive. To do a case-insensitive query you must prepend the operator with a tilde '~'.
	1.2.2 - 2018-02-06 ( eshagdar ): check value of empty-ness instead of length. '=' and '≠' characters are the same for FM ( but firrent case? ), so we need to use exact. prefix of tilde ( ~ )  in the operator is used for case insensitive queries. next version is going change equals to be case-sensitive, but we need this version to do the conversion.
	1.2.1 - 2018-01-17 ( eshagdar ): the equal sign now does a case-insensitive query. In order to do a case-sensitive query, use '=='. The 'IN' operator works on lists of numbers.
	1.2 - 2018-01-11 ( eshagdar ): convert FM operators to SQL-compatible operators
	1.1 - 2017-05-16 ( eshagdar ): added support for 'IN' operator.
	1.0 - 2016-06-27 ( dshockley ): first created.
*/


Let ( [ 
		signEqual = "=" ;
		signNotEqual = "<>" ;
		signDoubleEqual = "==" ;
		signTilde = "~" ;

		operator = Trim ( operator ) ;
		caseInsensitive = Exact ( Left ( operator; 1 ) ; signTilde );
		operator = Substitute (
			operator ;
			[ "≠" ; signNotEqual ] ;
			[ "≥" ; ">=" ] ;
			[ "≤" ; "<=" ] ;
			[ signDoubleEqual ; signEqual ];
			[ signTilde ; "" ]
		) ;

		fieldType = FieldType ( "" ; GetFieldName ( fieldRef ) ) ;
		fieldType_isText = Position ( fieldType ; "Text" ; 1 ; 1 ) ;


		codeForField = If ( caseInsensitive and fieldType_isText
			; "UPPER ( " & SQL_Field ( fieldRef ) & " )"
			; SQL_Field ( fieldRef )
		) ;


		codeForOperation = Case ( 
			IsEmpty ( someValue ) and Exact ( operator ; signEqual )
			; "IS NULL"
			; 
			IsEmpty ( someValue ) and Exact ( operator ; signNotEqual )
			; "IS NOT NULL"
			; 
			operator
		) ;


		codeForValue = Case ( 
			/* the null comparison is part of codeForOperation ( above ) */
			IsEmpty ( someValue ) and ( Exact ( operator ; signEqual ) or Exact ( operator ; signNotEqual ) )
			; ""
			; 
			operator = "LIKE"
			; SQL_EscapeString ( Trim ( someValue ) )
			; 
			operator = "IN" 
			; If ( fieldType_isText
				; "( " & SQL_EscapeList ( someValue ) & " )"
				; "( " & Substitute ( someValue ; [ ¶ ; ", " ] ) & " )"
			)
			; 
			fieldType_isText 
			; If ( caseInsensitive
				; SQL_EscapeString ( Upper ( someValue ) )
				; SQL_EscapeString ( someValue )
			)
			; 
			Position ( fieldType ; "Date" ; 1 ; 1 ) 
			; SQL_Date ( someValue )
			; 
			Position ( fieldType ; "Timestamp" ; 1 ; 1 ) 
			; SQL_Timestamp ( someValue )
			; 
			someValue
		)
	]; 

	codeForField
	& " "
	& codeForOperation
	& " "
	& codeForValue
)]]>
		</Calculation>
	</CustomFunction>
</fmxmlsnippet>