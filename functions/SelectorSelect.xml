<fmxmlsnippet type="FMObjectList">
	<CustomFunction id="405" functionArity="2" visible="True" parameters="fieldRef_Link;keyForLink" name="SelectorSelect">
		<Calculation><![CDATA[// SelectorSelect ( fieldRef_Link; keyForLink )
// version 1.4, Daniel A. Shockley, Erik Shagdar, NYHTC

/* 
	This is used to set the local variable for selection/editing via Selector-Connector.


HISTORY:
	1.4 - 2018-08-24 ( dshockley, eshagdar ): when keyForLink is empty, at least pick a UUID (numeric) to avoid just reading/writing to whatever record was previously selected. This may create a junk record, but that is better. Some warning notice will be added to this function later (warning will set/check a global variable to avoid warning more than once per X minutes for a specific script).  
	1.3 - 2017-11-08 ( dshockley, eshagdar ): added ability to pass in a string of the link fieldname instead of a direct reference, checking that the string is a valid field name to avoid code injection vulnerability. Updated attribution. 
	1.2.1 - 2016-09-29 ( eshagdar ): updated documentation.
	1.2 - 2016-09-06 ( dshockley ): now preserves return-delimited list of keys (avoid the FM bug "convert-returns-to-spaces").
	1.1 - 2016-xx-xx ( dshockley ): 
	1.0 - 2016-03-01 ( dshockley ): first created.
*/


Let ( [ 
	  keyForLink = 
		If ( not IsEmpty ( keyForLink )
			; keyForLink
			; 99991206367072599384400236226114503752185  /* This identifies the "junk" record (it was made using UniqueID, but now only one "junk" record will be created - or not, since the auto-enter key prevents record from successfully being created, but this will 'edit/access' a non-existent record instead of whichever was previously selected). */
			) 
	; fieldName_Link = GetFieldName ( fieldRef_Link )
	; fieldName_Link = 
		If ( fieldName_Link = "?" 
			/* If using the param as a reference fails, try it as a string. */
			; If ( IsValid ( GetField ( fieldRef_Link ) ) 
				/* But only if the string represents an actual field (avoid code injection vulnerability). NOTE we only test this if it was question mark. */
				; fieldRef_Link 
				; fieldName_Link 
				)  
			; fieldName_Link 
			)
	; fieldName_Link = GetValue ( Substitute ( fieldName_Link; "::"; "¶" ); 2 )  /*  Convert to short field name, from which the variable name is built. */

	; fieldNameSuffix = "_Link"

	; fieldNameWithoutLinkSuffix = Left ( fieldName_Link; Length ( fieldName_Link ) - Length ( fieldNameSuffix ) )
	; varPrefix = "$Selector_"
	; varName = varPrefix & fieldNameWithoutLinkSuffix
	; codeTemplate = "Let ( " & varName & " = __VALUES__; True ) " 
	; charDQ = "\""
	; keyValueOrList = If ( ValueCount ( keyForLink ) = 1 
			; Quote ( keyForLink )
			; "List ( " & charDQ & Substitute ( keyForLink ; [ "¶" ; charDQ & "; " & charDQ ] ) & charDQ & " )"
			)
	; codeToSetVar = Substitute ( codeTemplate ; "__VALUES__" ; keyValueOrList )
	; setVarToKey = Evaluate ( codeToSetVar )

	]; 

	True 

)]]>
		</Calculation>
	</CustomFunction>
</fmxmlsnippet>