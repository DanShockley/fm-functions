<fmxmlsnippet type="FMObjectList">

<CustomFunction id="502" functionArity="2" visible="True" parameters="EventNameList;EventKeyList" name="_Access_Permission">
<Calculation>
<![CDATA[// _Access_Permission ( EventNameList, EventKeyList )
// version 1.3.1, Erik Shagdar, NYHTC

/*
	Determine if the user/developer has a permission for a particular action. Full-Access accounts always have access.
	Names take priority over keys. At least ONE of the params must have a value. The params can be return-delimited list.


REQUIRES:
	_PrivSet_FullAccess
	_PrivSet_Developer
	DateFromISO8601
	HTC_ExecuteFileSQL
	SQL_Field
	SQL_FieldInList
	SQL_Table
	SQL_Where


HISTORY:
	1.3.1 - 2019-03-15 ( eshagdar ): if developer, do a query to the permission event table.
	1.3 - 2019-03-14 ( eshagdar ): devevelops do not automatically have access - it is determined by the checkbox on the permission event, and checked against in the status. clean up code formatting/whitespace.
	1.2.2 - 2018-05-08 ( eshagdar ): False if BOTH lists are empty, not if either one is.
	1.2.1 - 2018-04-27 ( eshagdar ): updated 'Requires' section of the documentation.
	1.2 - 2018-03-23 ( eshagdar ): 'EventName' param renamed to 'EventNameList'. added 'EventKeyList' param. params can be return-delimited lists.
	1.1 - 2018-02-12 ( dbeer ):  updated to add developers to always allow list
	1.0 - 2018-02-09 ( eshagdar ): first created.
*/


Case ( 
	/* full-access */
	_PrivSet_FullAccess ;
	True ;

	/* name / ID must be specified */
	IsEmpty ( EventNameList ) and IsEmpty ( EventKeyList ) ;
	False ;

	/* developer */
	_PrivSet_Developer ;
	let ( [
			numNames = ValueCount ( EventNameList ) ;
			numKeys = ValueCount ( EventKeyList ) ;


			whereCriteria = case (
				/* one or more NAMES specified */
				not IsEmpty ( EventNameList ) ;
				List ( 
					SQL_Where ( Utility_PERMISSION_EVENT::c00PE_FileName ; "=" ; Upper ( Get ( FileName ) ) ) ;
					" AND " ;
					If ( numNames = 1 ;
						SQL_Where ( Utility_PERMISSION_EVENT::b00PE_EventName ; "=" ; Upper ( EventNameList ) ) ;
						SQL_FieldInList ( Utility_PERMISSION_EVENT::b00PE_EventName ; Upper ( EventNameList ) )
					)
				) ;


				/* one or more KEYS specified */
				numKeys = 1 ;
				SQL_Where ( Utility_PERMISSION_EVENT::a00PE__PermissionEventKey ; "=" ; EventKeyList ) ;

				numKeys > 1 ;
				SQL_FieldInList ( Utility_PERMISSION_EVENT::a00PE__PermissionEventKey ; EventKeyList ) ;

				""
			) ;


			sqlQuery = List ( 
				"SELECT " ;
					SQL_Field ( Utility_PERMISSION_EVENT::b00PE_AllowDeveloper__b ) ;
				" FROM " ;
					SQL_Table ( Utility_PERMISSION_EVENT::zAuto1 ) ;
				" WHERE " ;
					whereCriteria ;
				" ORDER BY " ;
					SQL_Field ( Utility_PERMISSION_EVENT::b00PE_AllowDeveloper__b ) ;
					" DESC" ;
				" FETCH FIRST 1 ROWS ONLY"
			) ;


			sqlResult =HTC_ExecuteFileSQL ( sqlQuery ; "" ; Char ( 13 ) ; Char ( 13 ) ) ;
			sqlResult = If ( sqlResult = "?" ; "" ; sqlResult )
		] ;

		sqlResult
	) ;
	

	/* DEFAULT: check if current useris in the list */
	Let ( [
			numNames = ValueCount ( EventNameList ) ;
			numKeys = ValueCount ( EventKeyList ) ;


			whereCriteria = Case (
				/* one or more NAMES specified */
				not IsEmpty ( EventNameList ) ;
				List ( 
					SQL_Where ( Utility_PERMISSION::c00PJ_FileName__UPPER ; "=" ; Upper ( Get ( FileName ) ) ) ;
					" AND " ;
					If ( numNames = 1 ;
						SQL_Where ( Utility_PERMISSION::c00PJ_EventName__UPPER ; "=" ; Upper ( EventNameList ) ) ;
						SQL_FieldInList ( Utility_PERMISSION::c00PJ_EventName__UPPER ; Upper ( EventNameList ) )
					)
				) ;


				/* one or more KEYS specified */
				numKeys = 1 ;
				SQL_Where ( Utility_PERMISSION::a00PJ_PermissionEventKey ; "=" ; EventKeyList ) ;

				numKeys > 1 ;
				SQL_FieldInList ( Utility_PERMISSION::a00PJ_PermissionEventKey ; EventKeyList ) ;

				""
			) ;


			sqlQuery = List (
				"SELECT " ;
					SQL_Field ( Utility_PERMISSION::c00PJ_Status ) ;
					", " & SQL_Field ( Utility_PERMISSION::b00PJ_DateFrom ) ;
					", " & SQL_Field ( Utility_PERMISSION::b00PJ_DateTo ) ;
				" FROM " ;
					SQL_Table ( Utility_PERMISSION::zAuto1 ) ;
				" WHERE " ;
					SQL_Where ( Utility_PERMISSION::b00PJ_AccountName ; "=" ; Upper ( Get ( AccountName ) ) ) ;
				" AND " ;
					whereCriteria ;
				" ORDER BY " ;
					SQL_Field ( Utility_PERMISSION::zModTStmp ) ;
					" DESC" ;
				" FETCH FIRST 1 ROWS ONLY" ;
			) ;


			sqlResult =HTC_ExecuteFileSQL ( sqlQuery ; "" ; Char ( 13 ) ; Char ( 13 ) ) ;
			sqlResult = If ( sqlResult = "?" ; "" ; sqlResult ) ;


			isStatusAllowed = GetValue ( sqlResult ; 1 ) ;
			sql_dateFrom = GetValue ( sqlResult ; 2 ) ;
			sql_dateTo = GetValue ( sqlResult ; 3 ) ;


			dateToday = Get ( CurrentDate ) ;
			dateFrom = If ( not IsEmpty ( sql_dateFrom );
				DateFromISO8601 ( sql_dateFrom ) ;
				dateToday
			);
			dateTo = If ( not IsEmpty ( sql_dateTo );
				DateFromISO8601 ( sql_dateTo ) ;
				dateToday
			);


			isAllowed = If ( not isStatusAllowed ;
				False ;
				dateFrom ≤ dateToday and dateToday ≤ dateTo
			)
		];

		//sqlQuery & "¶==========¶¶" &
		//sqlResult

		isAllowed
	)
)]]>
</Calculation>
</CustomFunction>

</fmxmlsnippet>
